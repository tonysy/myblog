<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Songyang Zhang</title>
    <link>http://syzhang.me/post/</link>
      <atom:link href="http://syzhang.me/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Songyang Zhang@2020</copyright><lastBuildDate>Wed, 11 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://syzhang.me/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>http://syzhang.me/post/</link>
    </image>
    
    <item>
      <title>PyTorch Tips(FLOPs计算/参数量/计算图可视化/相关性分析)</title>
      <link>http://syzhang.me/post/zhihu/pytorch_tips_1/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://syzhang.me/post/zhihu/pytorch_tips_1/</guid>
      <description>&lt;p&gt;最近在做Research Project的时候，发现有些小工具很好用，记录在此。&lt;/p&gt;
&lt;h2 id=&#34;1-准确的flops-计算&#34;&gt;1. 准确的FLOPS 计算&lt;/h2&gt;
&lt;p&gt;网上开源的很多计算flops的工具只支持计算PyTorch内置层的flops,不能有效计算出自定义操作的flops。Facebook日前开源了一个面向PyTorch的CV工具包，内置了​flops_count​函数，支持细粒度的flops计算，包括​torch.einsum​，​torch.bmm​等操作均可计算。同时还支持自定义一个operation白名单，用来控制计算那些操作的FLOPS。&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/facebookresearch/fvcore/blob/master/tests/test_flop_count.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Example Link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-参数量计算&#34;&gt;2. 参数量计算&lt;/h2&gt;
&lt;p&gt;这个比较常用了，记录在此，方便查阅&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def params_count(model):
    &amp;quot;&amp;quot;&amp;quot;
    Compute the number of parameters.
    Args:
        model (model): model to count the number of parameters.
    &amp;quot;&amp;quot;&amp;quot;
    return np.sum([p.numel() for p in model.parameters()]).item()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-画出计算图&#34;&gt;3. 画出计算图&lt;/h2&gt;
&lt;p&gt;PyTorch 1.4版本内置了tensorboard，支持​add_graph ​，可以将我们定义的模型的计算图可视化出来，可以直观的看到每一层的size，和数据流向，为模型调试和验证提供了很好的帮助&lt;/p&gt;
&lt;p&gt;参见文档: &lt;a href=&#34;https://pytorch.org/docs/stable/tensorboard.html&#34;&gt;https://pytorch.org/docs/stable/tensorboard.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./model_structure.jpg&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-相关性分析&#34;&gt;4. 相关性分析&lt;/h2&gt;
&lt;p&gt;TensorFlow里有一个很好用的高维特征分析工具Projector, 内置TSNE和PCA。最新的PyTorch也加入了这个支持。可以先去http://projector.tensorflow.org/ 体验一下online版的。&lt;/p&gt;
&lt;p&gt;这个功能支持2D/3D的分析，同时可以交互式的点选，十分酷炫好用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch
from torch.utils.tensorboard import SummaryWriter

writer = SummaryWriter(&amp;quot;./visualization&amp;quot;)

cat_features = np.loadtxt(&amp;quot;category_features.txt&amp;quot;)
cat_labels = torch.load(&amp;quot;category_labels.txt&amp;quot;)

writer.add_embedding(cat_features, cat_labels)
writer.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- 有需求才会有发现，开源社区的轮子真的强大，期待以后也能给开源社区贡献轮子。 --&gt;
&lt;p&gt;&lt;img src=&#34;./correlation.jpg&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
